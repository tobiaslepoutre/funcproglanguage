;  Vérifie que n'importe quelle opération arithmétique fonctionne
(/(- (+ (* 2 4) 3) 5) 6);                   ↝ 1



; Vérifie la bonne construction d'une liste d'un seul élément
(list 1 nil);                               ↝ [1]

; Le comportement de list est différent suivant que 
; son premier argument est une liste ou une constante

; Dans ce cas on cajoute le premier élement à la liste passé en second argument
(list 1 (list 2 3));                        ↝ [1 2 . 3]
; Dans ce cas on créé un liste composée d'un liste et de la constante
(list (list 1 2) 3);                        ↝ [[1 . 2] . 3]

; list et add ont un comportement similaire
(list 1 (add 2 3));                         ↝ [1 2 . 3]
(list (add 1 2) 3);                         ↝ [[1 . 2] . 3]



; Les arguments/paramètres des fonctions peuvent être des chaînes de caractères
((fn (var) var) 2);                         ↝ 2 
(((fn (var) (fn (test) (* var test)))3)5);  ↝ 15



; la déclaration d'une liste de 3 éléments fonctionne, mais pas de 4.
; la construction d'une liste de plus de 3 éléments quant à elle fonctionne.
(list 1 2 3);                               ↝ [1 2 . 3]
(add (add (add 1 2) 3) 4);                  ↝ [[[1 . 2] . 3] . 4]
(add 1 (add 2 (add 3 4)));                  ↝ [1 2 3 . 4]
(list 1 2 3 4);                             ↝ [1 2 3 . 4] /!\ ne fonctionne pas